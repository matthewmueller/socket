package socket

// Code generated by /var/folders/3p/215s80gx7rx2qs2g9v5r601c0000gp/T/go-build1211496923/b001/exe/peg -strict -switch -inline parse.peg DO NOT EDIT.

import (
	"fmt"
	"io"
	"os"
	"sort"
	"strconv"
	"strings"
)

const endSymbol rune = 1114112

/* The rule types inferred from the grammar are below. */
type pegRule uint8

const (
	ruleUnknown pegRule = iota
	ruleURL
	ruleURI
	ruleScheme
	ruleFdScheme
	ruleAnySchema
	ruleHost
	ruleIPPort
	ruleHostNamePort
	ruleBracketsPort
	ruleIP
	ruleIPV4
	ruleHostName
	ruleOnlyPort
	rulePort
	ruleOnlyPath
	rulePath
	ruleRelPath
	ruleAbsPath
	ruleBrackets
	ruleEnd
	rulePegText
	ruleAction0
	ruleAction1
	ruleAction2
	ruleAction3
	ruleAction4
	ruleAction5
	ruleAction6
	ruleAction7
	ruleAction8
	ruleAction9
)

var rul3s = [...]string{
	"Unknown",
	"URL",
	"URI",
	"Scheme",
	"FdScheme",
	"AnySchema",
	"Host",
	"IPPort",
	"HostNamePort",
	"BracketsPort",
	"IP",
	"IPV4",
	"HostName",
	"OnlyPort",
	"Port",
	"OnlyPath",
	"Path",
	"RelPath",
	"AbsPath",
	"Brackets",
	"End",
	"PegText",
	"Action0",
	"Action1",
	"Action2",
	"Action3",
	"Action4",
	"Action5",
	"Action6",
	"Action7",
	"Action8",
	"Action9",
}

type token32 struct {
	pegRule
	begin, end uint32
}

func (t *token32) String() string {
	return fmt.Sprintf("\x1B[34m%v\x1B[m %v %v", rul3s[t.pegRule], t.begin, t.end)
}

type node32 struct {
	token32
	up, next *node32
}

func (node *node32) print(w io.Writer, pretty bool, buffer string) {
	var print func(node *node32, depth int)
	print = func(node *node32, depth int) {
		for node != nil {
			for c := 0; c < depth; c++ {
				fmt.Fprintf(w, " ")
			}
			rule := rul3s[node.pegRule]
			quote := strconv.Quote(string(([]rune(buffer)[node.begin:node.end])))
			if !pretty {
				fmt.Fprintf(w, "%v %v\n", rule, quote)
			} else {
				fmt.Fprintf(w, "\x1B[36m%v\x1B[m %v\n", rule, quote)
			}
			if node.up != nil {
				print(node.up, depth+1)
			}
			node = node.next
		}
	}
	print(node, 0)
}

func (node *node32) Print(w io.Writer, buffer string) {
	node.print(w, false, buffer)
}

func (node *node32) PrettyPrint(w io.Writer, buffer string) {
	node.print(w, true, buffer)
}

type tokens32 struct {
	tree []token32
}

func (t *tokens32) Trim(length uint32) {
	t.tree = t.tree[:length]
}

func (t *tokens32) Print() {
	for _, token := range t.tree {
		fmt.Println(token.String())
	}
}

func (t *tokens32) AST() *node32 {
	type element struct {
		node *node32
		down *element
	}
	tokens := t.Tokens()
	var stack *element
	for _, token := range tokens {
		if token.begin == token.end {
			continue
		}
		node := &node32{token32: token}
		for stack != nil && stack.node.begin >= token.begin && stack.node.end <= token.end {
			stack.node.next = node.up
			node.up = stack.node
			stack = stack.down
		}
		stack = &element{node: node, down: stack}
	}
	if stack != nil {
		return stack.node
	}
	return nil
}

func (t *tokens32) PrintSyntaxTree(buffer string) {
	t.AST().Print(os.Stdout, buffer)
}

func (t *tokens32) WriteSyntaxTree(w io.Writer, buffer string) {
	t.AST().Print(w, buffer)
}

func (t *tokens32) PrettyPrintSyntaxTree(buffer string) {
	t.AST().PrettyPrint(os.Stdout, buffer)
}

func (t *tokens32) Add(rule pegRule, begin, end, index uint32) {
	tree, i := t.tree, int(index)
	if i >= len(tree) {
		t.tree = append(tree, token32{pegRule: rule, begin: begin, end: end})
		return
	}
	tree[i] = token32{pegRule: rule, begin: begin, end: end}
}

func (t *tokens32) Tokens() []token32 {
	return t.tree
}

type parser struct {
	url uri

	Buffer string
	buffer []rune
	rules  [32]func() bool
	parse  func(rule ...int) error
	reset  func()
	Pretty bool
	tokens32
}

func (p *parser) Parse(rule ...int) error {
	return p.parse(rule...)
}

func (p *parser) Reset() {
	p.reset()
}

type textPosition struct {
	line, symbol int
}

type textPositionMap map[int]textPosition

func translatePositions(buffer []rune, positions []int) textPositionMap {
	length, translations, j, line, symbol := len(positions), make(textPositionMap, len(positions)), 0, 1, 0
	sort.Ints(positions)

search:
	for i, c := range buffer {
		if c == '\n' {
			line, symbol = line+1, 0
		} else {
			symbol++
		}
		if i == positions[j] {
			translations[positions[j]] = textPosition{line, symbol}
			for j++; j < length; j++ {
				if i != positions[j] {
					continue search
				}
			}
			break search
		}
	}

	return translations
}

type parseError struct {
	p   *parser
	max token32
}

func (e *parseError) Error() string {
	tokens, err := []token32{e.max}, "\n"
	positions, p := make([]int, 2*len(tokens)), 0
	for _, token := range tokens {
		positions[p], p = int(token.begin), p+1
		positions[p], p = int(token.end), p+1
	}
	translations := translatePositions(e.p.buffer, positions)
	format := "parse error near %v (line %v symbol %v - line %v symbol %v):\n%v\n"
	if e.p.Pretty {
		format = "parse error near \x1B[34m%v\x1B[m (line %v symbol %v - line %v symbol %v):\n%v\n"
	}
	for _, token := range tokens {
		begin, end := int(token.begin), int(token.end)
		err += fmt.Sprintf(format,
			rul3s[token.pegRule],
			translations[begin].line, translations[begin].symbol,
			translations[end].line, translations[end].symbol,
			strconv.Quote(string(e.p.buffer[begin:end])))
	}

	return err
}

func (p *parser) PrintSyntaxTree() {
	if p.Pretty {
		p.tokens32.PrettyPrintSyntaxTree(p.Buffer)
	} else {
		p.tokens32.PrintSyntaxTree(p.Buffer)
	}
}

func (p *parser) WriteSyntaxTree(w io.Writer) {
	p.tokens32.WriteSyntaxTree(w, p.Buffer)
}

func (p *parser) SprintSyntaxTree() string {
	var bldr strings.Builder
	p.WriteSyntaxTree(&bldr)
	return bldr.String()
}

func (p *parser) Execute() {
	buffer, _buffer, text, begin, end := p.Buffer, p.buffer, "", 0, 0
	for _, token := range p.Tokens() {
		switch token.pegRule {

		case rulePegText:
			begin, end = int(token.begin), int(token.end)
			text = string(_buffer[begin:end])

		case ruleAction0:

			p.url.uri = text

		case ruleAction1:

			p.url.scheme = "fd"
			p.url.host = text[3:]

		case ruleAction2:

			p.url.scheme = text[:len(text)-1]

		case ruleAction3:

			p.url.host = text

		case ruleAction4:

			p.url.host = text

		case ruleAction5:

			p.url.port = text

		case ruleAction6:

			p.url.scheme = "unix"

		case ruleAction7:

			p.url.path = text

		case ruleAction8:

			p.url.path = text

		case ruleAction9:

			p.url.host = "[::]"

		}
	}
	_, _, _, _, _ = buffer, _buffer, text, begin, end
}

func Pretty(pretty bool) func(*parser) error {
	return func(p *parser) error {
		p.Pretty = pretty
		return nil
	}
}

func Size(size int) func(*parser) error {
	return func(p *parser) error {
		p.tokens32 = tokens32{tree: make([]token32, 0, size)}
		return nil
	}
}
func (p *parser) Init(options ...func(*parser) error) error {
	var (
		max                  token32
		position, tokenIndex uint32
		buffer               []rune
	)
	for _, option := range options {
		err := option(p)
		if err != nil {
			return err
		}
	}
	p.reset = func() {
		max = token32{}
		position, tokenIndex = 0, 0

		p.buffer = []rune(p.Buffer)
		if len(p.buffer) == 0 || p.buffer[len(p.buffer)-1] != endSymbol {
			p.buffer = append(p.buffer, endSymbol)
		}
		buffer = p.buffer
	}
	p.reset()

	_rules := p.rules
	tree := p.tokens32
	p.parse = func(rule ...int) error {
		r := 1
		if len(rule) > 0 {
			r = rule[0]
		}
		matches := p.rules[r]()
		p.tokens32 = tree
		if matches {
			p.Trim(tokenIndex)
			return nil
		}
		return &parseError{p, max}
	}

	add := func(rule pegRule, begin uint32) {
		tree.Add(rule, begin, position, tokenIndex)
		tokenIndex++
		if begin != position && position > max.end {
			max = token32{rule, begin, position}
		}
	}

	matchDot := func() bool {
		if buffer[position] != endSymbol {
			position++
			return true
		}
		return false
	}

	/*matchChar := func(c byte) bool {
		if buffer[position] == c {
			position++
			return true
		}
		return false
	}*/

	/*matchRange := func(lower byte, upper byte) bool {
		if c := buffer[position]; c >= lower && c <= upper {
			position++
			return true
		}
		return false
	}*/

	_rules = [...]func() bool{
		nil,
		/* 0 URL <- <(URI / OnlyPath / Scheme / Host / (OnlyPort End))> */
		func() bool {
			position0, tokenIndex0 := position, tokenIndex
			{
				position1 := position
				{
					position2, tokenIndex2 := position, tokenIndex
					{
						position4 := position
						{
							position5 := position
							if !_rules[ruleScheme]() {
								goto l3
							}
							if buffer[position] != rune('/') {
								goto l3
							}
							position++
							if buffer[position] != rune('/') {
								goto l3
							}
							position++
							if !_rules[ruleHost]() {
								goto l3
							}
							{
								position6, tokenIndex6 := position, tokenIndex
								if !_rules[rulePath]() {
									goto l6
								}
								goto l7
							l6:
								position, tokenIndex = position6, tokenIndex6
							}
						l7:
							add(rulePegText, position5)
						}
						{
							add(ruleAction0, position)
						}
						add(ruleURI, position4)
					}
					goto l2
				l3:
					position, tokenIndex = position2, tokenIndex2
					{
						position10 := position
						if !_rules[rulePath]() {
							goto l9
						}
						{
							add(ruleAction6, position)
						}
						add(ruleOnlyPath, position10)
					}
					goto l2
				l9:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[ruleScheme]() {
						goto l12
					}
					goto l2
				l12:
					position, tokenIndex = position2, tokenIndex2
					if !_rules[ruleHost]() {
						goto l13
					}
					goto l2
				l13:
					position, tokenIndex = position2, tokenIndex2
					{
						position14 := position
						{
							position15, tokenIndex15 := position, tokenIndex
							if buffer[position] != rune(':') {
								goto l16
							}
							position++
							if !_rules[rulePort]() {
								goto l16
							}
							goto l15
						l16:
							position, tokenIndex = position15, tokenIndex15
							if !_rules[rulePort]() {
								goto l0
							}
						}
					l15:
						add(ruleOnlyPort, position14)
					}
					{
						position17 := position
						{
							position18, tokenIndex18 := position, tokenIndex
							if !matchDot() {
								goto l18
							}
							goto l0
						l18:
							position, tokenIndex = position18, tokenIndex18
						}
						add(ruleEnd, position17)
					}
				}
			l2:
				add(ruleURL, position1)
			}
			return true
		l0:
			position, tokenIndex = position0, tokenIndex0
			return false
		},
		/* 1 URI <- <(<(Scheme ('/' '/') Host Path?)> Action0)> */
		nil,
		/* 2 Scheme <- <(FdScheme / AnySchema)> */
		func() bool {
			position20, tokenIndex20 := position, tokenIndex
			{
				position21 := position
				{
					position22, tokenIndex22 := position, tokenIndex
					{
						position24 := position
						{
							position25 := position
							if buffer[position] != rune('f') {
								goto l23
							}
							position++
							if buffer[position] != rune('d') {
								goto l23
							}
							position++
							if buffer[position] != rune(':') {
								goto l23
							}
							position++
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l23
							}
							position++
						l26:
							{
								position27, tokenIndex27 := position, tokenIndex
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l27
								}
								position++
								goto l26
							l27:
								position, tokenIndex = position27, tokenIndex27
							}
							add(rulePegText, position25)
						}
						{
							add(ruleAction1, position)
						}
						add(ruleFdScheme, position24)
					}
					goto l22
				l23:
					position, tokenIndex = position22, tokenIndex22
					{
						position29 := position
						{
							position30 := position
							{
								position31, tokenIndex31 := position, tokenIndex
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l32
								}
								position++
								goto l31
							l32:
								position, tokenIndex = position31, tokenIndex31
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l20
								}
								position++
							}
						l31:
						l33:
							{
								position34, tokenIndex34 := position, tokenIndex
								{
									switch buffer[position] {
									case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
										if c := buffer[position]; c < rune('0') || c > rune('9') {
											goto l34
										}
										position++
									case '+':
										if buffer[position] != rune('+') {
											goto l34
										}
										position++
									case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
										if c := buffer[position]; c < rune('A') || c > rune('Z') {
											goto l34
										}
										position++
									default:
										if c := buffer[position]; c < rune('a') || c > rune('z') {
											goto l34
										}
										position++
									}
								}

								goto l33
							l34:
								position, tokenIndex = position34, tokenIndex34
							}
							if buffer[position] != rune(':') {
								goto l20
							}
							position++
							add(rulePegText, position30)
						}
						{
							add(ruleAction2, position)
						}
						add(ruleAnySchema, position29)
					}
				}
			l22:
				add(ruleScheme, position21)
			}
			return true
		l20:
			position, tokenIndex = position20, tokenIndex20
			return false
		},
		/* 3 FdScheme <- <(<('f' 'd' ':' [0-9]+)> Action1)> */
		nil,
		/* 4 AnySchema <- <(<(([a-z] / [A-Z]) ((&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('+') '+') | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))* ':')> Action2)> */
		nil,
		/* 5 Host <- <(IPPort / HostNamePort / BracketsPort / ((&('.' | '/') Path) | (&('[') Brackets) | (&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') IPV4) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z' | 'a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') HostName)))> */
		func() bool {
			position39, tokenIndex39 := position, tokenIndex
			{
				position40 := position
				{
					position41, tokenIndex41 := position, tokenIndex
					{
						position43 := position
						{
							position44 := position
							if !_rules[ruleIPV4]() {
								goto l42
							}
							add(ruleIP, position44)
						}
						if buffer[position] != rune(':') {
							goto l42
						}
						position++
						if !_rules[rulePort]() {
							goto l42
						}
						add(ruleIPPort, position43)
					}
					goto l41
				l42:
					position, tokenIndex = position41, tokenIndex41
					{
						position46 := position
						if !_rules[ruleHostName]() {
							goto l45
						}
						if buffer[position] != rune(':') {
							goto l45
						}
						position++
						if !_rules[rulePort]() {
							goto l45
						}
						add(ruleHostNamePort, position46)
					}
					goto l41
				l45:
					position, tokenIndex = position41, tokenIndex41
					{
						position48 := position
						if !_rules[ruleBrackets]() {
							goto l47
						}
						if buffer[position] != rune(':') {
							goto l47
						}
						position++
						if !_rules[rulePort]() {
							goto l47
						}
						add(ruleBracketsPort, position48)
					}
					goto l41
				l47:
					position, tokenIndex = position41, tokenIndex41
					{
						switch buffer[position] {
						case '.', '/':
							if !_rules[rulePath]() {
								goto l39
							}
						case '[':
							if !_rules[ruleBrackets]() {
								goto l39
							}
						case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
							if !_rules[ruleIPV4]() {
								goto l39
							}
						default:
							if !_rules[ruleHostName]() {
								goto l39
							}
						}
					}

				}
			l41:
				add(ruleHost, position40)
			}
			return true
		l39:
			position, tokenIndex = position39, tokenIndex39
			return false
		},
		/* 6 IPPort <- <(IP ':' Port)> */
		nil,
		/* 7 HostNamePort <- <(HostName ':' Port)> */
		nil,
		/* 8 BracketsPort <- <(Brackets ':' Port)> */
		nil,
		/* 9 IP <- <IPV4> */
		nil,
		/* 10 IPV4 <- <(<([0-9]+ '.' [0-9]+ '.' [0-9]+ '.' [0-9]+)> Action3)> */
		func() bool {
			position54, tokenIndex54 := position, tokenIndex
			{
				position55 := position
				{
					position56 := position
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l54
					}
					position++
				l57:
					{
						position58, tokenIndex58 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l58
						}
						position++
						goto l57
					l58:
						position, tokenIndex = position58, tokenIndex58
					}
					if buffer[position] != rune('.') {
						goto l54
					}
					position++
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l54
					}
					position++
				l59:
					{
						position60, tokenIndex60 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l60
						}
						position++
						goto l59
					l60:
						position, tokenIndex = position60, tokenIndex60
					}
					if buffer[position] != rune('.') {
						goto l54
					}
					position++
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l54
					}
					position++
				l61:
					{
						position62, tokenIndex62 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l62
						}
						position++
						goto l61
					l62:
						position, tokenIndex = position62, tokenIndex62
					}
					if buffer[position] != rune('.') {
						goto l54
					}
					position++
					if c := buffer[position]; c < rune('0') || c > rune('9') {
						goto l54
					}
					position++
				l63:
					{
						position64, tokenIndex64 := position, tokenIndex
						if c := buffer[position]; c < rune('0') || c > rune('9') {
							goto l64
						}
						position++
						goto l63
					l64:
						position, tokenIndex = position64, tokenIndex64
					}
					add(rulePegText, position56)
				}
				{
					add(ruleAction3, position)
				}
				add(ruleIPV4, position55)
			}
			return true
		l54:
			position, tokenIndex = position54, tokenIndex54
			return false
		},
		/* 11 HostName <- <(<(([a-z] / [A-Z]) ((&('0' | '1' | '2' | '3' | '4' | '5' | '6' | '7' | '8' | '9') [0-9]) | (&('A' | 'B' | 'C' | 'D' | 'E' | 'F' | 'G' | 'H' | 'I' | 'J' | 'K' | 'L' | 'M' | 'N' | 'O' | 'P' | 'Q' | 'R' | 'S' | 'T' | 'U' | 'V' | 'W' | 'X' | 'Y' | 'Z') [A-Z]) | (&('a' | 'b' | 'c' | 'd' | 'e' | 'f' | 'g' | 'h' | 'i' | 'j' | 'k' | 'l' | 'm' | 'n' | 'o' | 'p' | 'q' | 'r' | 's' | 't' | 'u' | 'v' | 'w' | 'x' | 'y' | 'z') [a-z]))*)> Action4)> */
		func() bool {
			position66, tokenIndex66 := position, tokenIndex
			{
				position67 := position
				{
					position68 := position
					{
						position69, tokenIndex69 := position, tokenIndex
						if c := buffer[position]; c < rune('a') || c > rune('z') {
							goto l70
						}
						position++
						goto l69
					l70:
						position, tokenIndex = position69, tokenIndex69
						if c := buffer[position]; c < rune('A') || c > rune('Z') {
							goto l66
						}
						position++
					}
				l69:
				l71:
					{
						position72, tokenIndex72 := position, tokenIndex
						{
							switch buffer[position] {
							case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9':
								if c := buffer[position]; c < rune('0') || c > rune('9') {
									goto l72
								}
								position++
							case 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z':
								if c := buffer[position]; c < rune('A') || c > rune('Z') {
									goto l72
								}
								position++
							default:
								if c := buffer[position]; c < rune('a') || c > rune('z') {
									goto l72
								}
								position++
							}
						}

						goto l71
					l72:
						position, tokenIndex = position72, tokenIndex72
					}
					add(rulePegText, position68)
				}
				{
					add(ruleAction4, position)
				}
				add(ruleHostName, position67)
			}
			return true
		l66:
			position, tokenIndex = position66, tokenIndex66
			return false
		},
		/* 12 OnlyPort <- <((':' Port) / Port)> */
		nil,
		/* 13 Port <- <(<('0' / ([1-9] [0-9]*))> Action5)> */
		func() bool {
			position76, tokenIndex76 := position, tokenIndex
			{
				position77 := position
				{
					position78 := position
					{
						position79, tokenIndex79 := position, tokenIndex
						if buffer[position] != rune('0') {
							goto l80
						}
						position++
						goto l79
					l80:
						position, tokenIndex = position79, tokenIndex79
						if c := buffer[position]; c < rune('1') || c > rune('9') {
							goto l76
						}
						position++
					l81:
						{
							position82, tokenIndex82 := position, tokenIndex
							if c := buffer[position]; c < rune('0') || c > rune('9') {
								goto l82
							}
							position++
							goto l81
						l82:
							position, tokenIndex = position82, tokenIndex82
						}
					}
				l79:
					add(rulePegText, position78)
				}
				{
					add(ruleAction5, position)
				}
				add(rulePort, position77)
			}
			return true
		l76:
			position, tokenIndex = position76, tokenIndex76
			return false
		},
		/* 14 OnlyPath <- <(Path Action6)> */
		nil,
		/* 15 Path <- <(RelPath / AbsPath)> */
		func() bool {
			position85, tokenIndex85 := position, tokenIndex
			{
				position86 := position
				{
					position87, tokenIndex87 := position, tokenIndex
					{
						position89 := position
						{
							position90 := position
							if buffer[position] != rune('.') {
								goto l88
							}
							position++
							if buffer[position] != rune('/') {
								goto l88
							}
							position++
						l91:
							{
								position92, tokenIndex92 := position, tokenIndex
								if !matchDot() {
									goto l92
								}
								goto l91
							l92:
								position, tokenIndex = position92, tokenIndex92
							}
							add(rulePegText, position90)
						}
						{
							add(ruleAction7, position)
						}
						add(ruleRelPath, position89)
					}
					goto l87
				l88:
					position, tokenIndex = position87, tokenIndex87
					{
						position94 := position
						{
							position95 := position
							if buffer[position] != rune('/') {
								goto l85
							}
							position++
						l96:
							{
								position97, tokenIndex97 := position, tokenIndex
								if !matchDot() {
									goto l97
								}
								goto l96
							l97:
								position, tokenIndex = position97, tokenIndex97
							}
							add(rulePegText, position95)
						}
						{
							add(ruleAction8, position)
						}
						add(ruleAbsPath, position94)
					}
				}
			l87:
				add(rulePath, position86)
			}
			return true
		l85:
			position, tokenIndex = position85, tokenIndex85
			return false
		},
		/* 16 RelPath <- <(<('.' '/' .*)> Action7)> */
		nil,
		/* 17 AbsPath <- <(<('/' .*)> Action8)> */
		nil,
		/* 18 Brackets <- <('[' ':' ':' ']' Action9)> */
		func() bool {
			position101, tokenIndex101 := position, tokenIndex
			{
				position102 := position
				if buffer[position] != rune('[') {
					goto l101
				}
				position++
				if buffer[position] != rune(':') {
					goto l101
				}
				position++
				if buffer[position] != rune(':') {
					goto l101
				}
				position++
				if buffer[position] != rune(']') {
					goto l101
				}
				position++
				{
					add(ruleAction9, position)
				}
				add(ruleBrackets, position102)
			}
			return true
		l101:
			position, tokenIndex = position101, tokenIndex101
			return false
		},
		/* 19 End <- <!.> */
		nil,
		nil,
		/* 22 Action0 <- <{
		  p.url.uri = text
		}> */
		nil,
		/* 23 Action1 <- <{
		  p.url.scheme = "fd"
		  p.url.host = text[3:]
		}> */
		nil,
		/* 24 Action2 <- <{
		  p.url.scheme = text[:len(text)-1]
		}> */
		nil,
		/* 25 Action3 <- <{
		  p.url.host = text
		}> */
		nil,
		/* 26 Action4 <- <{
		  p.url.host = text
		}> */
		nil,
		/* 27 Action5 <- <{
		  p.url.port = text
		}> */
		nil,
		/* 28 Action6 <- <{
		  p.url.scheme = "unix"
		}> */
		nil,
		/* 29 Action7 <- <{
		  p.url.path = text
		}> */
		nil,
		/* 30 Action8 <- <{
		  p.url.path = text
		}> */
		nil,
		/* 31 Action9 <- <{
		  p.url.host = "[::]"
		}> */
		nil,
	}
	p.rules = _rules
	return nil
}
